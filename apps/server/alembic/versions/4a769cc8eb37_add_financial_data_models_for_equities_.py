"""Add financial data models for equities and options

Revision ID: 4a769cc8eb37
Revises:
Create Date: 2025-08-28 20:11:30.114857

"""

from typing import Sequence, Union

import sqlalchemy as sa

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "4a769cc8eb37"
down_revision: Union[str, Sequence[str], None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "accounts",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("account_hash", sa.String(length=64), nullable=False),
        sa.Column("account_number", sa.String(length=32), nullable=False),
        sa.Column("nickname", sa.String(length=100), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("account_hash"),
        sa.UniqueConstraint("account_hash", name="uq_account_hash"),
        sa.UniqueConstraint("account_number"),
        sa.UniqueConstraint("account_number", name="uq_account_number"),
    )
    op.create_table(
        "exchanges",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("code", sa.String(length=10), nullable=False),
        sa.Column("name", sa.String(length=255), nullable=False),
        sa.Column("mic_code", sa.String(length=4), nullable=False),
        sa.Column("timezone", sa.String(length=50), nullable=False),
        sa.Column("currency", sa.String(length=3), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("code"),
        sa.UniqueConstraint("code", name="uq_exchange_code"),
        sa.UniqueConstraint("mic_code"),
        sa.UniqueConstraint("mic_code", name="uq_exchange_mic_code"),
    )
    op.create_table(
        "oauth_states",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.String(), nullable=True),
        sa.Column("state", sa.String(), nullable=True),
        sa.Column("created_at", sa.DateTime(), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_oauth_states_state"), "oauth_states", ["state"], unique=False
    )
    op.create_index(
        op.f("ix_oauth_states_user_id"), "oauth_states", ["user_id"], unique=True
    )
    op.create_table(
        "stream_subscriptions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("user_id", sa.String(length=64), nullable=False),
        sa.Column("symbol", sa.String(length=32), nullable=False),
        sa.Column("stream_type", sa.String(length=16), nullable=False),
        sa.Column("book", sa.String(length=16), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "user_id", "symbol", "stream_type", "book", name="uq_stream_sub_unique"
        ),
    )
    op.create_index(
        "ix_stream_sub_user_type_symbol",
        "stream_subscriptions",
        ["user_id", "stream_type", "symbol"],
        unique=False,
    )
    op.create_table(
        "securities",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("symbol", sa.String(length=20), nullable=False),
        sa.Column("cusip", sa.String(length=9), nullable=True),
        sa.Column("ssid", sa.BigInteger(), nullable=True),
        sa.Column("description", sa.String(length=255), nullable=False),
        sa.Column("exchange_id", sa.UUID(), nullable=False),
        sa.Column("asset_type", sa.String(length=20), nullable=False),
        sa.Column("asset_sub_type", sa.String(length=10), nullable=True),
        sa.Column("sector", sa.String(length=100), nullable=True),
        sa.Column("industry", sa.String(length=100), nullable=True),
        sa.Column("market_cap", sa.BigInteger(), nullable=True),
        sa.Column("shares_outstanding", sa.BigInteger(), nullable=True),
        sa.Column("is_shortable", sa.Boolean(), nullable=True),
        sa.Column("is_hard_to_borrow", sa.Boolean(), nullable=True),
        sa.Column("htb_rate", sa.NUMERIC(precision=8, scale=4), nullable=True),
        sa.Column("has_options", sa.Boolean(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("listing_date", sa.Date(), nullable=True),
        sa.Column("delisting_date", sa.Date(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.CheckConstraint("market_cap >= 0", name="ck_security_market_cap_positive"),
        sa.CheckConstraint(
            "shares_outstanding >= 0", name="ck_security_shares_outstanding_positive"
        ),
        sa.ForeignKeyConstraint(["exchange_id"], ["exchanges.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("cusip"),
        sa.UniqueConstraint("cusip", name="uq_security_cusip"),
        sa.UniqueConstraint("ssid"),
        sa.UniqueConstraint("ssid", name="uq_security_ssid"),
        sa.UniqueConstraint("symbol"),
        sa.UniqueConstraint("symbol", name="uq_security_symbol"),
    )
    op.create_table(
        "transactions",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("account_id", sa.UUID(), nullable=False),
        sa.Column("provider", sa.String(length=20), nullable=False),
        sa.Column("provider_transaction_id", sa.String(length=64), nullable=False),
        sa.Column("type", sa.String(length=32), nullable=False),
        sa.Column("symbol", sa.String(length=32), nullable=True),
        sa.Column("quantity", sa.NUMERIC(precision=20, scale=8), nullable=True),
        sa.Column("price", sa.NUMERIC(precision=20, scale=8), nullable=True),
        sa.Column("amount", sa.NUMERIC(precision=20, scale=8), nullable=True),
        sa.Column("fees", sa.NUMERIC(precision=20, scale=8), nullable=True),
        sa.Column("transaction_time", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.CheckConstraint(
            "quantity IS NULL OR quantity >= 0", name="ck_txn_qty_nonneg"
        ),
        sa.ForeignKeyConstraint(["account_id"], ["accounts.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "provider", "provider_transaction_id", name="uq_transaction_provider_id"
        ),
    )
    op.create_index(
        "ix_transaction_account_time",
        "transactions",
        ["account_id", "transaction_time"],
        unique=False,
    )
    op.create_index(
        "ix_transaction_time_brin",
        "transactions",
        ["transaction_time"],
        unique=False,
        postgresql_using="brin",
    )
    op.create_table(
        "charts",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("security_id", sa.UUID(), nullable=False),
        sa.Column("timestamp", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("timeframe", sa.String(length=10), nullable=False),
        sa.Column("instrument_type", sa.String(length=10), nullable=False),
        sa.Column("open_price", sa.BigInteger(), nullable=False),
        sa.Column("high_price", sa.BigInteger(), nullable=False),
        sa.Column("low_price", sa.BigInteger(), nullable=False),
        sa.Column("close_price", sa.BigInteger(), nullable=False),
        sa.Column("volume", sa.BigInteger(), nullable=False),
        sa.Column("trade_count", sa.Integer(), nullable=True),
        sa.Column("vwap", sa.BigInteger(), nullable=True),
        sa.Column("is_regular_hours", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.CheckConstraint("close_price > 0", name="ck_chart_close_price_positive"),
        sa.CheckConstraint("high_price > 0", name="ck_chart_high_price_positive"),
        sa.CheckConstraint(
            "high_price >= low_price", name="ck_chart_high_greater_than_low"
        ),
        sa.CheckConstraint("low_price > 0", name="ck_chart_low_price_positive"),
        sa.CheckConstraint("open_price > 0", name="ck_chart_open_price_positive"),
        sa.CheckConstraint("volume >= 0", name="ck_chart_volume_non_negative"),
        sa.ForeignKeyConstraint(["security_id"], ["securities.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "timestamp"),
        sa.UniqueConstraint(
            "security_id",
            "timestamp",
            "timeframe",
            name="uq_chart_security_timestamp_timeframe",
        ),
        postgresql_partition_by="RANGE (timestamp)",
    )
    op.create_index(
        "ix_chart_security_timeframe_timestamp",
        "charts",
        ["security_id", "timeframe", "timestamp"],
        unique=False,
    )
    op.create_index(
        "ix_chart_timestamp_brin",
        "charts",
        ["timestamp"],
        unique=False,
        postgresql_using="brin",
    )
    op.create_table(
        "level_one_quotes",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("security_id", sa.UUID(), nullable=False),
        sa.Column("timestamp", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("instrument_type", sa.String(length=10), nullable=False),
        sa.Column("bid_price", sa.BigInteger(), nullable=True),
        sa.Column("bid_size", sa.Integer(), nullable=True),
        sa.Column("bid_mic_id", sa.String(length=4), nullable=True),
        sa.Column("ask_price", sa.BigInteger(), nullable=True),
        sa.Column("ask_size", sa.Integer(), nullable=True),
        sa.Column("ask_mic_id", sa.String(length=4), nullable=True),
        sa.Column("last_price", sa.BigInteger(), nullable=True),
        sa.Column("last_size", sa.Integer(), nullable=True),
        sa.Column("last_mic_id", sa.String(length=4), nullable=True),
        sa.Column("mark_price", sa.BigInteger(), nullable=True),
        sa.Column("spread", sa.BigInteger(), nullable=True),
        sa.Column("daily_high", sa.BigInteger(), nullable=True),
        sa.Column("daily_low", sa.BigInteger(), nullable=True),
        sa.Column("daily_open", sa.BigInteger(), nullable=True),
        sa.Column("prev_close", sa.BigInteger(), nullable=True),
        sa.Column("daily_volume", sa.BigInteger(), nullable=True),
        sa.Column("net_change", sa.BigInteger(), nullable=True),
        sa.Column(
            "net_change_percent", sa.NUMERIC(precision=8, scale=4), nullable=True
        ),
        sa.Column("security_status", sa.String(length=20), nullable=True),
        sa.Column("quote_time", sa.BigInteger(), nullable=True),
        sa.Column("trade_time", sa.BigInteger(), nullable=True),
        sa.Column("is_realtime", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.CheckConstraint(
            "(ask_price IS NULL OR bid_price IS NULL OR ask_price >= bid_price)",
            name="ck_level_one_ask_gte_bid",
        ),
        sa.CheckConstraint("ask_size >= 0", name="ck_level_one_ask_size_non_negative"),
        sa.CheckConstraint("bid_size >= 0", name="ck_level_one_bid_size_non_negative"),
        sa.CheckConstraint(
            "daily_volume >= 0", name="ck_level_one_daily_volume_non_negative"
        ),
        sa.CheckConstraint(
            "last_size >= 0", name="ck_level_one_last_size_non_negative"
        ),
        sa.ForeignKeyConstraint(["security_id"], ["securities.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "timestamp"),
        postgresql_partition_by="RANGE (timestamp)",
    )
    op.create_index(
        "ix_level_one_security_timestamp",
        "level_one_quotes",
        ["security_id", "timestamp"],
        unique=False,
    )
    op.create_index(
        "ix_level_one_timestamp_brin",
        "level_one_quotes",
        ["timestamp"],
        unique=False,
        postgresql_using="brin",
    )
    op.create_table(
        "level_two_quotes",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("security_id", sa.UUID(), nullable=False),
        sa.Column("timestamp", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("instrument_type", sa.String(length=10), nullable=False),
        sa.Column("side", sa.String(length=3), nullable=False),
        sa.Column("price_level", sa.BigInteger(), nullable=False),
        sa.Column("size", sa.BigInteger(), nullable=False),
        sa.Column("order_count", sa.Integer(), nullable=False),
        sa.Column("level_index", sa.Integer(), nullable=False),
        sa.Column("market_maker_id", sa.String(length=10), nullable=True),
        sa.Column("mic_id", sa.String(length=4), nullable=True),
        sa.Column("quote_time", sa.BigInteger(), nullable=True),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.CheckConstraint(
            "level_index >= 0", name="ck_level_two_level_index_non_negative"
        ),
        sa.CheckConstraint("order_count > 0", name="ck_level_two_order_count_positive"),
        sa.CheckConstraint("price_level > 0", name="ck_level_two_price_level_positive"),
        sa.CheckConstraint("size > 0", name="ck_level_two_size_positive"),
        sa.ForeignKeyConstraint(["security_id"], ["securities.id"], ondelete="CASCADE"),
        sa.PrimaryKeyConstraint("id", "timestamp"),
        sa.UniqueConstraint(
            "security_id",
            "timestamp",
            "side",
            "price_level",
            name="uq_level_two_security_timestamp_side_price",
        ),
        postgresql_partition_by="RANGE (timestamp)",
    )
    op.create_index(
        "ix_level_two_security_timestamp",
        "level_two_quotes",
        ["security_id", "timestamp"],
        unique=False,
    )
    op.create_index(
        "ix_level_two_timestamp_brin",
        "level_two_quotes",
        ["timestamp"],
        unique=False,
        postgresql_using="brin",
    )
    op.create_table(
        "option_contracts",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("underlying_security_id", sa.UUID(), nullable=False),
        sa.Column("symbol", sa.String(length=50), nullable=False),
        sa.Column("cusip", sa.String(length=9), nullable=True),
        sa.Column("ssid", sa.BigInteger(), nullable=True),
        sa.Column("description", sa.String(length=255), nullable=False),
        sa.Column("contract_type", sa.String(length=4), nullable=False),
        sa.Column("strike_price", sa.BigInteger(), nullable=False),
        sa.Column("expiration_date", sa.Date(), nullable=False),
        sa.Column("expiration_type", sa.String(length=10), nullable=True),
        sa.Column("days_to_expiration", sa.Integer(), nullable=True),
        sa.Column("exercise_type", sa.String(length=10), nullable=True),
        sa.Column("settlement_type", sa.String(length=10), nullable=True),
        sa.Column("multiplier", sa.Integer(), nullable=False),
        sa.Column("last_trading_day", sa.Date(), nullable=True),
        sa.Column("is_penny_pilot", sa.Boolean(), nullable=False),
        sa.Column("is_mini", sa.Boolean(), nullable=False),
        sa.Column("is_non_standard", sa.Boolean(), nullable=False),
        sa.Column("deliverables", sa.Text(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("updated_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.CheckConstraint(
            "days_to_expiration >= 0",
            name="ck_option_contract_days_to_expiration_non_negative",
        ),
        sa.CheckConstraint(
            "multiplier > 0", name="ck_option_contract_multiplier_positive"
        ),
        sa.CheckConstraint(
            "strike_price > 0", name="ck_option_contract_strike_price_positive"
        ),
        sa.ForeignKeyConstraint(
            ["underlying_security_id"], ["securities.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("cusip"),
        sa.UniqueConstraint("cusip", name="uq_option_contract_cusip"),
        sa.UniqueConstraint("ssid"),
        sa.UniqueConstraint("ssid", name="uq_option_contract_ssid"),
        sa.UniqueConstraint("symbol"),
        sa.UniqueConstraint("symbol", name="uq_option_contract_symbol"),
    )
    op.create_table(
        "option_quotes",
        sa.Column("id", sa.UUID(), nullable=False),
        sa.Column("option_contract_id", sa.UUID(), nullable=False),
        sa.Column("timestamp", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.Column("bid_price", sa.BigInteger(), nullable=True),
        sa.Column("bid_size", sa.Integer(), nullable=True),
        sa.Column("ask_price", sa.BigInteger(), nullable=True),
        sa.Column("ask_size", sa.Integer(), nullable=True),
        sa.Column("last_price", sa.BigInteger(), nullable=True),
        sa.Column("last_size", sa.Integer(), nullable=True),
        sa.Column("mark_price", sa.BigInteger(), nullable=True),
        sa.Column("daily_high", sa.BigInteger(), nullable=True),
        sa.Column("daily_low", sa.BigInteger(), nullable=True),
        sa.Column("daily_open", sa.BigInteger(), nullable=True),
        sa.Column("prev_close", sa.BigInteger(), nullable=True),
        sa.Column("daily_volume", sa.BigInteger(), nullable=True),
        sa.Column("open_interest", sa.BigInteger(), nullable=True),
        sa.Column("net_change", sa.BigInteger(), nullable=True),
        sa.Column(
            "net_change_percent", sa.NUMERIC(precision=8, scale=4), nullable=True
        ),
        sa.Column(
            "implied_volatility", sa.NUMERIC(precision=8, scale=4), nullable=True
        ),
        sa.Column("delta", sa.NUMERIC(precision=8, scale=6), nullable=True),
        sa.Column("gamma", sa.NUMERIC(precision=8, scale=6), nullable=True),
        sa.Column("theta", sa.NUMERIC(precision=8, scale=6), nullable=True),
        sa.Column("vega", sa.NUMERIC(precision=8, scale=6), nullable=True),
        sa.Column("rho", sa.NUMERIC(precision=8, scale=6), nullable=True),
        sa.Column("theoretical_value", sa.BigInteger(), nullable=True),
        sa.Column("intrinsic_value", sa.BigInteger(), nullable=True),
        sa.Column("time_value", sa.BigInteger(), nullable=True),
        sa.Column("underlying_price", sa.BigInteger(), nullable=True),
        sa.Column("is_in_the_money", sa.Boolean(), nullable=True),
        sa.Column("security_status", sa.String(length=20), nullable=True),
        sa.Column("quote_time", sa.BigInteger(), nullable=True),
        sa.Column("trade_time", sa.BigInteger(), nullable=True),
        sa.Column("is_realtime", sa.Boolean(), nullable=False),
        sa.Column("created_at", sa.TIMESTAMP(timezone=True), nullable=False),
        sa.CheckConstraint(
            "(ask_price IS NULL OR bid_price IS NULL OR ask_price >= bid_price)",
            name="ck_option_quote_ask_gte_bid",
        ),
        sa.CheckConstraint(
            "ask_size >= 0", name="ck_option_quote_ask_size_non_negative"
        ),
        sa.CheckConstraint(
            "bid_size >= 0", name="ck_option_quote_bid_size_non_negative"
        ),
        sa.CheckConstraint(
            "daily_volume >= 0", name="ck_option_quote_daily_volume_non_negative"
        ),
        sa.CheckConstraint(
            "last_size >= 0", name="ck_option_quote_last_size_non_negative"
        ),
        sa.CheckConstraint(
            "open_interest >= 0", name="ck_option_quote_open_interest_non_negative"
        ),
        sa.ForeignKeyConstraint(
            ["option_contract_id"], ["option_contracts.id"], ondelete="CASCADE"
        ),
        sa.PrimaryKeyConstraint("id", "timestamp"),
        postgresql_partition_by="RANGE (timestamp)",
    )
    op.create_index(
        "ix_option_quote_contract_timestamp",
        "option_quotes",
        ["option_contract_id", "timestamp"],
        unique=False,
    )
    op.create_index(
        "ix_option_quote_timestamp_brin",
        "option_quotes",
        ["timestamp"],
        unique=False,
        postgresql_using="brin",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(
        "ix_option_quote_timestamp_brin",
        table_name="option_quotes",
        postgresql_using="brin",
    )
    op.drop_index("ix_option_quote_contract_timestamp", table_name="option_quotes")
    op.drop_table("option_quotes")
    op.drop_table("option_contracts")
    op.drop_index(
        "ix_level_two_timestamp_brin",
        table_name="level_two_quotes",
        postgresql_using="brin",
    )
    op.drop_index("ix_level_two_security_timestamp", table_name="level_two_quotes")
    op.drop_table("level_two_quotes")
    op.drop_index(
        "ix_level_one_timestamp_brin",
        table_name="level_one_quotes",
        postgresql_using="brin",
    )
    op.drop_index("ix_level_one_security_timestamp", table_name="level_one_quotes")
    op.drop_table("level_one_quotes")
    op.drop_index(
        "ix_chart_timestamp_brin", table_name="charts", postgresql_using="brin"
    )
    op.drop_index("ix_chart_security_timeframe_timestamp", table_name="charts")
    op.drop_table("charts")
    op.drop_index(
        "ix_transaction_time_brin", table_name="transactions", postgresql_using="brin"
    )
    op.drop_index("ix_transaction_account_time", table_name="transactions")
    op.drop_table("transactions")
    op.drop_table("securities")
    op.drop_index("ix_stream_sub_user_type_symbol", table_name="stream_subscriptions")
    op.drop_table("stream_subscriptions")
    op.drop_index(op.f("ix_oauth_states_user_id"), table_name="oauth_states")
    op.drop_index(op.f("ix_oauth_states_state"), table_name="oauth_states")
    op.drop_table("oauth_states")
    op.drop_table("exchanges")
    op.drop_table("accounts")
    # ### end Alembic commands ###
