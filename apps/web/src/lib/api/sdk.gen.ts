// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from "./client";
import type {
  SchwabOauthCallbackApiAuthSchwabCallbackGetData,
  SchwabOauthCallbackApiAuthSchwabCallbackGetResponses,
  SchwabOauthCallbackApiAuthSchwabCallbackGetErrors,
  RootGetData,
  RootGetResponses,
  HealthCheckHealthGetData,
  HealthCheckHealthGetResponses,
  ProtectedRouteProtectedGetData,
  ProtectedRouteProtectedGetResponses,
  GetUserProfileUserProfileGetData,
  GetUserProfileUserProfileGetResponses,
  GetCurrentUserInfoUserMeGetData,
  GetCurrentUserInfoUserMeGetResponses,
  GetConnectionStatusConnectionsStatusGetData,
  GetConnectionStatusConnectionsStatusGetResponses,
  ConnectSchwabConnectSchwabPostData,
  ConnectSchwabConnectSchwabPostResponses,
  DisconnectSchwabDisconnectSchwabDeleteData,
  DisconnectSchwabDisconnectSchwabDeleteResponses,
  ResetSchwabConnectionResetSchwabPostData,
  ResetSchwabConnectionResetSchwabPostResponses,
  GetOpenapiOpenapiJsonGetData,
  GetOpenapiOpenapiJsonGetResponses,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Schwab Oauth Callback
 * Handle Schwab OAuth callback - validates state to identify user
 */
export const schwabOauthCallbackApiAuthSchwabCallbackGet = <
  ThrowOnError extends boolean = false,
>(
  options: Options<
    SchwabOauthCallbackApiAuthSchwabCallbackGetData,
    ThrowOnError
  >,
) => {
  return (options.client ?? _heyApiClient).get<
    SchwabOauthCallbackApiAuthSchwabCallbackGetResponses,
    SchwabOauthCallbackApiAuthSchwabCallbackGetErrors,
    ThrowOnError
  >({
    url: "/api/auth/schwab/callback",
    ...options,
  });
};

/**
 * Root
 */
export const rootGet = <ThrowOnError extends boolean = false>(
  options?: Options<RootGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    RootGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/",
    ...options,
  });
};

/**
 * Health Check
 */
export const healthCheckHealthGet = <ThrowOnError extends boolean = false>(
  options?: Options<HealthCheckHealthGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    HealthCheckHealthGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/health",
    ...options,
  });
};

/**
 * Protected Route
 * Example protected route that requires authentication
 */
export const protectedRouteProtectedGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ProtectedRouteProtectedGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    ProtectedRouteProtectedGetResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/protected",
    ...options,
  });
};

/**
 * Get User Profile
 * Get current user profile
 */
export const getUserProfileUserProfileGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetUserProfileUserProfileGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetUserProfileUserProfileGetResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/user/profile",
    ...options,
  });
};

/**
 * Get Current User Info
 * Get current user info using header auth
 */
export const getCurrentUserInfoUserMeGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetCurrentUserInfoUserMeGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetCurrentUserInfoUserMeGetResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/user/me",
    ...options,
  });
};

/**
 * Get Connection Status
 * Get status of all supported connections
 */
export const getConnectionStatusConnectionsStatusGet = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetConnectionStatusConnectionsStatusGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetConnectionStatusConnectionsStatusGetResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/connections/status",
    ...options,
  });
};

/**
 * Connect Schwab
 * Connect Schwab account - validates owner internally and returns auth URL
 */
export const connectSchwabConnectSchwabPost = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ConnectSchwabConnectSchwabPostData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    ConnectSchwabConnectSchwabPostResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/connect/schwab",
    ...options,
  });
};

/**
 * Disconnect Schwab
 * Disconnect Schwab account - validates owner internally
 */
export const disconnectSchwabDisconnectSchwabDelete = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<DisconnectSchwabDisconnectSchwabDeleteData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).delete<
    DisconnectSchwabDisconnectSchwabDeleteResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/disconnect/schwab",
    ...options,
  });
};

/**
 * Reset Schwab Connection
 * Reset Schwab connection - clears all auth data including tokens and OAuth states
 */
export const resetSchwabConnectionResetSchwabPost = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<ResetSchwabConnectionResetSchwabPostData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    ResetSchwabConnectionResetSchwabPostResponses,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/reset/schwab",
    ...options,
  });
};

/**
 * Get Openapi
 * Export OpenAPI schema for code generation
 */
export const getOpenapiOpenapiJsonGet = <ThrowOnError extends boolean = false>(
  options?: Options<GetOpenapiOpenapiJsonGetData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    GetOpenapiOpenapiJsonGetResponses,
    unknown,
    ThrowOnError
  >({
    url: "/openapi.json",
    ...options,
  });
};
